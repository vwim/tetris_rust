#[derive(Copy, Clone, Debug, PartialEq)]
pub enum Color {
    Yellow,
	Cyan,
    Green,
	Red,
    Blue,
	Orange,
    Purple
}

impl Color {
	pub fn as_rgba(&self) -> [f32; 4] {
		match *self {
			Color::Yellow	=> [1.0, 1.0, 0.0, 1.0],
			Color::Cyan		=> [0.0, 1.0, 1.0, 1.0],
			Color::Green	=> [0.0, 1.0, 0.0, 1.0],
			Color::Red		=> [1.0, 0.0, 0.0, 1.0],
			Color::Blue		=> [0.0, 0.0, 1.0, 1.0],
			Color::Orange	=> [1.0, 0.6, 0.0, 1.0],
			Color::Purple	=> [1.0, 0.0, 1.0, 1.0]
		}
	}
}

pub type Rotation = [(isize, isize); 4];
pub type Tetromino = ([Rotation; 4], Color);
pub type Tetrominos = [Tetromino; 7];

pub static TETROMINOS: Tetrominos = [
			([[(-1,0), (0,0), (-1,1), (0,1)],
			  [(-1,0), (0,0), (-1,1), (0,1)],
			  [(-1,0), (0,0), (-1,1), (0,1)],
			  [(-1,0), (0,0), (-1,1), (0,1)]], Color::Yellow),

			([[(-2,0), (-1,0), (0,0), (1,0)],
			  [(0,-1), (0,0), (0,1), (0,2)],
			  [(-2,0), (-1,0), (0,0), (1,0)],
			  [(0,-1), (0,0), (0,1), (0,2)]], Color::Cyan),

			([[(0,0), (1,0), (0,1), (-1,1)],
			  [(0,0), (0,-1), (1,0), (1,1)],
			  [(0,0), (1,0), (0,1), (-1,1)],
			  [(0,0), (0,-1), (1,0), (1,1)]], Color::Green),

			([[(-1,0), (0,0), (0,1), (1,1)],
			  [(1,-1), (1,0), (0,0), (0,1)],
			  [(-1,0), (0,0), (0,1), (1,1)],
			  [(1,-1), (1,0), (0,0), (0,1)]], Color::Red),
			  
			([[(-1,1), (-1,0), (0,0), (1,0)],
			  [(0,-1), (0,0), (0,1), (1,1)],
			  [(-1,0), (0,0), (1,0), (1,-1)],
			  [(-1,-1), (0,-1), (0,0), (0,1)]], Color::Blue),
			  
			([[(-1,0), (0,0), (1,0), (1,1)],
			  [(0,1), (0,0), (0,-1), (1,-1)],
			  [(1,0), (0,0), (-1,0), (-1,-1)],
			  [(-1,1), (0,1), (0,0), (0,-1)]], Color::Orange),

			([[(-1,0), (0,0), (0,1), (1,0)],
			  [(0,-1), (0,0), (0,1), (1,0)],
			  [(-1,0), (0,0), (0,-1), (1,0)],
			  [(-1,0), (0,0), (0,1), (0,-1)]], Color::Purple)
];